@model Chinmaya.Registration.Models.FamilyMemberModel
<div class="modal-dialog modal-dialog-centered modal-lg" role="document">
	<div class="modal-content">
		<div class="modal-body">
			@using (Ajax.BeginForm("AddFamilyMember", "Account", FormMethod.Post,
						new AjaxOptions
						{
							OnSuccess = "OnSuccess",
							OnFailure = "OnFailure",
							OnBegin = "OnBegin"
						}))
	{
		@Html.AntiForgeryToken()
		if (!string.IsNullOrEmpty(Model.Id))
		{
				<h5 class="modal-title">Edit Family Member</h5>
		}
		else
		{
				<h5 class="modal-title">Add Family Member</h5>
		}

		<div class="row">
			<div class="col-md-6">
				@Html.LabelFor(m => m.FirstName, new { @class = "requiredA" })
				@Html.TextBoxFor(m => m.FirstName, new { @class = "form-control", @Name = "FirstName" })
				@Html.ValidationMessageFor(m => m.FirstName)
			</div>
			<div class="col-md-6">
				@Html.LabelFor(m => m.LastName, new { @class = "requiredA" })
				@Html.TextBoxFor(m => m.LastName, new { @class = "form-control", @Name = "LastName" })
				@Html.ValidationMessageFor(m => m.LastName)
			</div>

		</div>
		<div class="row">
			<div class="col-md-6">
				@*@Html.LabelFor(m => m.DOB, new { @class = "requiredA" })
				<div class="input-group date">
					<input id="DOB" type="text" class="datepicker form-control" required><div class="input-group-addon"><span class="glyphicon glyphicon-th"></span></div>
				</div>
				<span class ="field-validation-error">The date of birth field is required</span>*@
				@*@Html.ValidationMessageFor(m => m.DOB)*@

				@Html.LabelFor(m => m.DOB, new { @class = "requiredA" })
				<div class="input-group date">
				@Html.TextBoxFor(m => m.DOB, new { @class = "datepicker form-control", @type = "text", @Name = "DOB", @value=""})
				<div class="input-group-addon"><span class="glyphicon glyphicon-th"></span></div></div>
				@Html.ValidationMessageFor(m => m.DOB)
			</div>
				<div class="col-md-6">

					@Html.LabelFor(m => m.RelationshipData, new { @class = "requiredA" })
					@Html.DropDownList("RelationshipData", new SelectList(Model.relationships, "Id", "Name"), "Select", new { @class = "form-control" })
					@Html.ValidationMessageFor(m => m.RelationshipData)
				</div>
			</div>
		<div class="row">
			<div id="GradeSelectBox" class="col-md-6 d-lg-none">
				<label>
					Grade
					<img id="GradeTooltip" src="~/Content/img/info-icon.png" alt="" title="Grade in school (@Model.Year)" />
				</label>
				@Html.DropDownList("Grade", new SelectList(Model.grades, "Id", "Name"), "Select", new { @class = "form-control" })
				@Html.ValidationMessageFor(m => m.Grade)
			</div>
			<div class="col-md-6">
				@Html.LabelFor(m => m.GenderData)
				@Html.DropDownList("GenderData", new SelectList(Model.genders, "Id", "Name"), "Select", new { @class = "form-control" })
				@Html.ValidationMessageFor(m => m.GenderData)
			</div>
		</div>
		<div class="row">
			<div class="col-md-6">
				@Html.LabelFor(m => m.CellPhone)
				@Html.TextBoxFor(m => m.CellPhone, new { @class = "form-control", @Name = "CellPhone" })
				@Html.ValidationMessageFor(m => m.CellPhone)
			</div>
			<div id="EmailAddress" class="col-md-6 d-lg-none">
				@Html.LabelFor(m => m.Email)
				@Html.TextBoxFor(m => m.Email, new { @class = "form-control", @Name = "Email" })
				@Html.ValidationMessageFor(m => m.Email)
			</div>
		</div>
		<div class="row">
			<div class="col-md-12">
				<button class="btn btn-secondary float-left mr-3" id="btnCancel" type="button" data-dismiss="modal" name="prevBtn">Cancel <i class="material-icons">cancel</i></button>
				@*<button id="closeModal" class="btn btn-secondary float-left mr-3" type="button" name="prevBtn">Cancel <i class="material-icons">cancel</i></button>*@
				@if (!string.IsNullOrEmpty(Model.Id))
				{
					<button class="btn btn-orange" id="btnsubmit" type="submit" data-target="#demo" data-toggle="collapse" name="nextBtn">Update <i class="material-icons">check_circle</i></button>
				}
				else
				{
					<button class="btn btn-orange" id="btnsubmit" type="submit" data-target="#demo" data-toggle="collapse" name="nextBtn">Submit <i class="material-icons">check_circle</i></button>
				}



				
			</div>
		</div>
			}
		</div>
	</div>
</div>

<script>

	$(document).ready(function () {
		$('.datepicker').datepicker({
			todayHighlight: true,
			autoclose: true,
			defaultDate: false
		});
		$('.datepicker').datepicker({ dateFormat: 'dd-mm-yyyy' }).datepicker("setDate", null);

		
		$("#DOB").on("blur", function () {
			document.getElementById("EmailAddress").className = "col-md-6 d-lg-none"
			document.getElementById("GradeSelectBox").className = "col-md-6 d-lg-none"
			var dob = new Date($(this).val());
			
			if (dob != "Invalid Date") {
				var today = new Date();
				var age = Math.floor((today - dob) / (365.25 * 24 * 60 * 60 * 1000));
				$('#age').html(age + ' years old');
				if (age >= 18) {
					//$("#EmailAddress").show();
					document.getElementById("EmailAddress").className = "col-md-6"
				}
				else {

					document.getElementById("GradeSelectBox").className = "col-md-6"

				}
			}
			

		});
		$("#Email").on("blur", function () {
			window.confirm("Dear Family Member, Would you like to subscribe to our Newsletter");

		});
	});

	
	function OnSuccess(response) {
		if (typeof (response.Message) !== 'undefined') {
			if (response.IsSuccess) {
				toastr.success(response.Message, "Add Family Member", { timeOut: 3000 });
				setTimeout(function () {
					window.location.reload();
				}, 2000);
				return;
			}
			toastr.error(response.Message, "Add Family Member");
		}
		$("#btnsubmit").prop("disabled", false);
	}

	function OnBegin() {
		$("#btnsubmit").prop("disabled", true);
	}
</script>

