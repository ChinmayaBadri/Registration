@model Chinmaya.Registration.Models.EventsModel
<style>
.fa {
	color:gray;
}
	.fas {
		padding-top:10px;
		padding-left:4px;
	}
.input-group-addon {
	background-color:lightgray;
	width: 25px;
}
</style>
<div class="modal-dialog modal-dialog-centered modal-lg">
	<div class="modal-content">
		<div class="modal-body">

			@using (Ajax.BeginForm("AddEvent", "Event", FormMethod.Post,
				new AjaxOptions
				{
					OnSuccess = "OnSuccessEvent",
					OnBegin = "OnBeginEvent"
				}, new { id = "eventForm", role = "form" }))
			{
				@Html.AntiForgeryToken()

				if (!string.IsNullOrEmpty(Model.Id))
				{
					<h5 class="modal-title">Edit Event</h5>
				}
				else
				{
					<h5 class="modal-title">Add Event</h5>
				}
				<p><span class="red-txt">*</span> Denotes a required field</p>
				@Html.ValidationSummary(true)

				<div class="row">
					@Html.HiddenFor(m => m.Id, new { id = "evID" })
					<div class="col-md-4">
						@Html.LabelFor(m => m.Name, new { @class = "requiredA" })
						@Html.TextBoxFor(m => m.Name, new { @class = "form-control", @Name = "Name" })
						@Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
					</div>
					<div class="col-md-4">
						@Html.LabelFor(m => m.Description)
						@Html.TextBoxFor(m => m.Description, new { @class = "form-control", @Name = "Description" })
						@Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
					</div>
					<div class="col-md-4">
						@Html.LabelFor(m => m.WeekdayId)
						@Html.DropDownList("WeekdayId", new SelectList(Model.weekday, "Id", "Name", ViewBag.SelectedWeekday), "Select", new { @class = "form-control", @style = "height: 35px;" })
						@Html.ValidationMessageFor(m => m.WeekdayId, "", new { @class = "text-danger" })
					</div>
				</div>

				<div class="row">

					<div class="col-md-4">
						@Html.LabelFor(m => m.FrequencyId, new { @class = "requiredA" })
						@Html.DropDownList("FrequencyId", new SelectList(Model.frequencies, "Id", "Name", ViewBag.SelectedFrequency), "Select", new { @class = "form-control", @style = "height: 35px;" })
						@Html.ValidationMessageFor(m => m.FrequencyId, "", new { @class = "text-danger" })
					</div>
					<div class="col-md-4">
						@Html.LabelFor(m => m.AgeFrom)
						@Html.TextBoxFor(m => m.AgeFrom, new { @class = "form-control", @Name = "AgeFrom" })
						@Html.ValidationMessageFor(m => m.AgeFrom, "", new { @class = "text-danger" })
					</div>
					<div class="col-md-4">
						@Html.LabelFor(m => m.AgeTo)
						@Html.TextBoxFor(m => m.AgeTo, new { @class = "form-control", @Name = "AgeTo" })
						@Html.ValidationMessageFor(m => m.AgeTo, "", new { @class = "text-danger" })
					</div>
				</div>

				<div class="row">
					<div class="col-md-4">
						@Html.LabelFor(m => m.SessionId, new { @class = "requiredA" })
						@Html.DropDownList("SessionId", new SelectList(Model.sessions, "Id", "Name"), "Select", new { @class = "form-control", @style = "height: 35px;" })
						@Html.ValidationMessageFor(m => m.SessionId, "", new { @class = "text-danger" })
					</div>
					<div class="col-md-4">
						@Html.LabelFor(m => m.StartDate)
						<div class="input-group">
							@Html.TextBoxFor(m => m.StartDate, "{0:d}", new { @class = "datepicker form-control", @type = "text", @Name = "StartDate", @value = "", @style = "height: 35px;" })
							<span class="input-group-addon"><i class="fas fa-calendar-alt"></i></span>
						</div>
						@Html.ValidationMessageFor(m => m.StartDate, "", new { @class = "text-danger" })
					</div>
					<div class="col-md-4">
						@Html.LabelFor(m => m.EndDate)
						<div class="input-group">
							@Html.TextBoxFor(m => m.EndDate, "{0:d}", new { @class = "datepicker form-control", @type = "text", @Name = "EndDate", @value = "", @style = "height: 35px;" })
							<span class="input-group-addon"><i class="fas fa-calendar-alt"></i></span>
						</div>
						@Html.ValidationMessageFor(m => m.EndDate, "", new { @class = "text-danger" })
					</div>
				</div>

				<div class="row">
					<div class="col-md-4">
						@Html.Label("Start Time", new { @class = "requiredA" })
						<div class='input-group mb-0'>
							@Html.TextBoxFor(m => m.StartTime, new { @class = "form-control", @type = "text", @Name = "StartTime", @style = "height: 35px;" })
							<span class="input-group-addon">
								<i class="fas fa-clock"></i>
							</span>
						</div>
						@Html.ValidationMessageFor(m => m.StartTime, "", new { @class = "text-danger" })
					</div>
					<div class="col-md-4">
						@Html.Label("End Time", new { @class = "requiredA" })
						<div class='input-group mb-0'>
							@Html.TextBoxFor(m => m.EndTime, new { @class = "form-control", @type = "text", @Name = "EndTime", @style = "height: 35px;" })
							<span class="input-group-addon">
								<i class="fas fa-clock"></i>
							</span>
						</div>
						@Html.ValidationMessageFor(m => m.EndTime, "", new { @class = "text-danger" })
					</div>
					<div class="col-md-4">
						@Html.LabelFor(m => m.Amount)
						@Html.TextBoxFor(m => m.Amount, new { @class = "form-control", @Name = "Amount" })
						@Html.ValidationMessageFor(m => m.Amount, "", new { @class = "text-danger" })
					</div>
				</div>

				<div class="row">
					<div class="col-md-4">
						@Html.LabelFor(m => m.Location)
						@Html.TextBoxFor(m => m.Location, new { @class = "form-control", @Name = "Location" })
						@Html.ValidationMessageFor(m => m.Location, "", new { @class = "text-danger" })
					</div>
					<div class="col-md-4">
						@Html.LabelFor(m => m.Instructor)
						@Html.TextBoxFor(m => m.Instructor, new { @class = "form-control", @Name = "Instructor" })
						@Html.ValidationMessageFor(m => m.Instructor, "", new { @class = "text-danger" })
					</div>
					<div class="col-md-4">
						@Html.LabelFor(m => m.Contact)
						@Html.TextBoxFor(m => m.Contact, new { @class = "form-control", @Name = "Contact" })
						@Html.ValidationMessageFor(m => m.Contact, "", new { @class = "text-danger" })
					</div>

				</div>
				<div class="row">
					<div class="col-md-4 form-group">
						@Html.LabelFor(m => m.Other)
						@Html.TextBoxFor(m => m.Other, new { @class = "form-control", @Name = "Other" })
						@Html.ValidationMessageFor(m => m.Other, "", new { @class = "text-danger" })
					</div>
					<div class="col-md-4 form-group">
						@Html.LabelFor(m => m.HolidayDate, new { @class = "requiredA" })
						<div class="input-group date mb-0">
							@Html.TextBoxFor(m => m.HolidayDate, "{0:d}", new { @class = "datepicker form-control", @type = "text", @Name = "HolidayDate", @value = "", @style = "height: 35px;" })
							<span class="input-group-addon"><i class="fas fa-calendar-alt"></i></span>
						</div>
						<label class="text-danger" id="Err_HolidayDate">The HolidayDate field is required</label>
					</div>
				</div>
				<div class="row">
					<div class="col-md-12">
						<button class="btn btn-secondary float-left mr-3" id="btnCancel" type="button" data-dismiss="modal" aria-hidden="true">Cancel <i class="material-icons">cancel</i></button>
						@if (!string.IsNullOrEmpty(Model.Id))
						{
							<button class="btn btn-orange" id="btnsubmit" type="submit" data-toggle="collapse">Update <i class="material-icons">check_circle</i></button>
						}
						else
						{
							<button class="btn btn-orange" id="btnsubmit" type="submit" data-toggle="collapse">Submit <i class="material-icons">check_circle</i></button>
						}

					</div>
				</div>

			}
		</div>
	</div>
</div>


<script>
	$(document).ready(function () {
		$.validator.unobtrusive.parse($("form"));
		$("#Err_HolidayDate").hide();
		$('.datepicker').datepicker({
			todayHighlight: true,
			autoclose: true,
			useCurrent:true,
			defaultDate: false,
			dateFormat: 'mm/dd/yyyy',
			startDate: '-100y'
		});
		//$('.fa-calendar-alt').click(function () {
		//	$(this).datepicker();
		//});		

		$("#StartTime, #EndTime").datetimepicker({
			format: 'HH:mm',
			icons: {
				up: "fa fa-chevron-circle-up",
				down: "fa fa-chevron-circle-down",
			}
		});
		
	});

	function OnSuccessEvent(response) {
		toastr.options = {
			positionClass: 'toast-top-center'
		};
		if (typeof (response.Message) !== 'undefined') {
			if (response.IsSuccess) {
				toastr.success(response.Message, { timeOut: 3000 });
				setTimeout(function () {
					window.location.reload();
				}, 2000);
				return;
			}
			toastr.error(response.Message);
		}
	}

	function OnBeginEvent() {
		var holidayDate = new Date($("#HolidayDate").val());
		var year = holidayDate.getFullYear();
		if (year == 2001) {
			$("#Err_HolidayDate").show();
			return false;
		}
		else {
			$("#Err_HolidayDate").hide();
			return true;
		}
	}
</script>
